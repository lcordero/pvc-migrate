###
# required
# pvc_namespace
# pvc_name
# volume_name
# bound_pod_uid
# failed_pvcs: []
# successful_pvcs: []
# node_name
# mig_source_host:

- set_fact:
    mig_source_data_base_location: "/var/lib/origin/openshift.local.volumes"
    mig_source_data_location_k8s_mount: "kubernetes.io~glusterfs"

- set_fact:
    mig_dest_data_location: "/mnt/{{ pvc_ns }}/{{ pvc_vol_safe_name }}"
    mig_source_data_location: "{{ mig_source_data_base_location }}/pods/{{ bound_pod_uid }}/volumes/{{ mig_source_data_location_k8s_mount }}/{{ volume_name }}/"
    mig_source_host: "{{ node_name }}"

- set_fact:
    source_validation_msg: |
      The directory {{ mig_source_data_location }} does not exist on the source cluster. Possible reasons could be :
      [1] PVC is not bound to any pod
      [2] Backing storage is not readable
      [3] PVC doesn't have a storage class
      [4] State of the source system changed between Stage 1 and Stage 3 execution
      Skipping to the next PV...

- delegate_to: "{{ mig_source_host|mandatory }}"
  tags:
  - sync_phase
  - final_phase
  block:
    - name: "Ensure directory exists on the source"
      stat:
        path: "{{ mig_source_data_location }}"
      register: source_dir_stat
      become: yes

    - when: not source_dir_stat.get('stat', {}).get('exists', False)
      block:
      - set_fact:
          sync_output:
            stderr: "{{ source_validation_msg }}"
      - fail:
          msg: "{{ source_validation_msg }}"


    - name: "Login into Dest cluster"
      shell: "oc login --token={{ mig_dest_sa_token }} --server={{ mig_dest_server }}"
      become: yes


    - name: "Synchronizing files. This may take a while..."
      shell: "oc -n {{ pvc_ns }} rsync {{ mig_source_data_location }} {{ rsync_pod_name }}:{{ mig_dest_data_location }} --progress --delete --compress -c rsyncd"
      register: sync_output
      become: yes

  rescue:
    - vars:
        sync_rc:
          rc: 1
      set_fact:
        sync_output: "{{ sync_output | d({}) | combine(sync_rc, recursive=true) }}"

  always:
    - name: "Collect failed pvcs"
      vars:
        failed_pvc:
          - name: "{{ pvc_name }}"
            namespace: "{{ pvc_ns }}"
            stdout: "{{ sync_output.get('stdout', '') }}"
            stderr: "{{ sync_output.get('stderr', '') }}"
            rc: "{{ sync_output.get('rc', 1) }}"
      set_fact:
        failed_pvcs: "{{ failed_pvcs + failed_pvc }}"
      when: sync_output.get('rc', 0) != 0

    - name: "Collect successful pvcs"
      vars:
        successful_pvc:
          - name: "{{ pvc_name }}"
            namespace: "{{ pvc_ns }}"
      set_fact:
        successful_pvcs: "{{ successful_pvcs + successful_pvc }}"
      when:
        - sync_output is defined
        - sync_output.get('rc', 0) == 0
